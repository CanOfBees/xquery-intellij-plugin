/*
 * Copyright (C) 2021 Reece H. Dunn
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package uk.co.reecedunn.intellij.plugin.marklogic.xray.test

import com.intellij.execution.actions.ConfigurationContext
import com.intellij.execution.actions.ConfigurationFromContext
import com.intellij.execution.actions.LazyRunConfigurationProducer
import com.intellij.execution.configurations.ConfigurationFactory
import com.intellij.execution.configurations.ConfigurationTypeUtil
import com.intellij.openapi.util.Ref
import com.intellij.psi.PsiDirectory
import com.intellij.psi.PsiElement
import com.intellij.psi.PsiFile
import uk.co.reecedunn.intellij.plugin.marklogic.intellij.execution.configurations.type.XRayTestConfigurationType
import uk.co.reecedunn.intellij.plugin.marklogic.xray.configuration.XRayTestConfiguration
import uk.co.reecedunn.intellij.plugin.xpath.ast.xpath.XPathEQName

class XRayTestRunConfigurationProducer : LazyRunConfigurationProducer<XRayTestConfiguration>() {
    override fun getConfigurationFactory(): ConfigurationFactory {
        val type = ConfigurationTypeUtil.findConfigurationType(XRayTestConfigurationType::class.java)
        return type.configurationFactories[0]
    }

    override fun shouldReplace(self: ConfigurationFromContext, other: ConfigurationFromContext): Boolean {
        // Replace the run configuration generated by gradle, etc.
        return self.sourceElement is PsiDirectory
    }

    override fun isConfigurationFromContext(
        configuration: XRayTestConfiguration,
        context: ConfigurationContext
    ): Boolean = when (val element = context.location?.psiElement) {
        is PsiDirectory -> when {
            XRayTestService.isTestDirectory(element) -> configuration.appliesTo(element)
            else -> false
        }
        is PsiFile -> when {
            XRayTestService.isTestModule(element) -> configuration.appliesTo(element)
            else -> false
        }
        is XPathEQName -> when {
            XRayTestService.isTestModule(element) -> configuration.appliesTo(element.containingFile)
            XRayTestService.isTestCase(element) -> configuration.appliesTo(element.containingFile, element)
            else -> false
        }
        else -> false
    }

    override fun setupConfigurationFromContext(
        configuration: XRayTestConfiguration,
        context: ConfigurationContext,
        sourceElement: Ref<PsiElement>
    ): Boolean = when (val element = context.location?.psiElement) {
        is PsiDirectory -> when {
            XRayTestService.isTestDirectory(element) -> configuration.create(element)
            else -> false
        }
        is PsiFile -> when {
            XRayTestService.isTestModule(element) -> configuration.create(element)
            else -> false
        }
        is XPathEQName -> when {
            XRayTestService.isTestModule(element) -> configuration.create(element.containingFile)
            XRayTestService.isTestCase(element) -> configuration.create(element.containingFile, element)
            else -> false
        }
        else -> false
    }
}
