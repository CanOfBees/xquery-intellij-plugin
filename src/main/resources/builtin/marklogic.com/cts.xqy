xquery version "1.0-ml";

(:~
 : MarkLogic cts functions
 :
 : @see https://docs.marklogic.com/cts/classifier
 : @see https://docs.marklogic.com/cts/cts:order-constructors
 : @see https://docs.marklogic.com/cts/constructors
 : @see https://docs.marklogic.com/cts/geospatial-(deprecated)
 : @see https://docs.marklogic.com/cts/geospatial-constructors
 : @see https://docs.marklogic.com/cts/geospatial-lexicon
 : @see https://docs.marklogic.com/cts/lexicon
 : @see https://docs.marklogic.com/cts/math-lexicon
 : @see https://docs.marklogic.com/cts/search
 : @see https://docs.marklogic.com/cts/search-clustering
 : @see https://docs.marklogic.com/cts/temporal
 :)
module  namespace cts = "http://marklogic.com/xdmp/cts";
declare namespace xs  = "http://www.w3.org/2001/XMLSchema";
declare namespace a   = "http://reecedunn.co.uk/xquery/annotations";

declare %a:since("marklogic", "6.0") function cts:aggregate($native-plugin as xs:string, $aggregate-name as xs:string, $range-indexes as cts:reference*, $argument as item()*) as item()* external;
declare %a:since("marklogic", "6.0") function cts:aggregate($native-plugin as xs:string, $aggregate-name as xs:string, $range-indexes as cts:reference*, $argument as item()*, $options as xs:string*) as item()* external;
declare %a:since("marklogic", "6.0") function cts:aggregate($native-plugin as xs:string, $aggregate-name as xs:string, $range-indexes as cts:reference*, $argument as item()*, $options as xs:string*, $query as cts:query?) as item()* external;
declare %a:since("marklogic", "6.0") function cts:aggregate($native-plugin as xs:string, $aggregate-name as xs:string, $range-indexes as cts:reference*, $argument as item()*, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*) as item()* external;
declare %a:since("marklogic", "5.0") function cts:and-not-query($positive-query as cts:query, $negative-query as cts:query) as cts:and-not-query external;
declare %a:since("marklogic", "5.0") function cts:and-not-query-negative-query($query as cts:and-not-query) as cts:query external;
declare %a:since("marklogic", "5.0") function cts:and-not-query-positive-query($query as cts:and-not-query) as cts:query external;
declare %a:since("marklogic", "5.0") function cts:and-query($queries as cts:query*) as cts:and-query external;
declare %a:since("marklogic", "5.0") function cts:and-query($queries as cts:query*, $options as xs:string*) as cts:and-query external;
declare %a:since("marklogic", "5.0") function cts:and-query-options($query as cts:and-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:and-query-queries($query as cts:and-query) as cts:query* external;
declare %a:since("marklogic", "5.0") function cts:arc-intersection($p1 as cts:point, $p2 as cts:point, $q1 as cts:point, $q2 as cts:point) as cts:point external;
declare %a:since("marklogic", "5.0") function cts:arc-intersection($p1 as cts:point, $p2 as cts:point, $q1 as cts:point, $q2 as cts:point, $options as xs:string*) as cts:point external;
declare %a:since("marklogic", "5.0") function cts:avg($arg as xs:anyAtomicType*) as xs:anyAtomicType? external;
declare %a:since("marklogic", "6.0") function cts:avg-aggregate($range-index as cts:reference) as xs:anyAtomicType? external;
declare %a:since("marklogic", "6.0") function cts:avg-aggregate($range-index as cts:reference, $options as xs:string*) as xs:anyAtomicType? external;
declare %a:since("marklogic", "6.0") function cts:avg-aggregate($range-index as cts:reference, $options as xs:string*, $query as cts:query?) as xs:anyAtomicType? external;
declare %a:since("marklogic", "6.0") function cts:avg-aggregate($range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*) as xs:anyAtomicType? external;
declare %a:since("marklogic", "5.0") function cts:bearing($p1 as cts:point, $p2 as cts:point) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:bearing($p1 as cts:point, $p2 as cts:point, $options as xs:string*) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:bounding-boxes($region as cts:region) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:bounding-boxes($region as cts:region, $options as xs:string*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:box($south as xs:float, $west as xs:float, $north as xs:float, $east as xs:float) as cts:box external;
declare %a:since("marklogic", "5.0") function cts:box-east($box as cts:box) as xs:float external;
declare %a:since("marklogic", "5.0") function cts:box-intersects($box as cts:box, $region as cts:region*) as xs:boolean external;
declare %a:since("marklogic", "5.0") function cts:box-intersects($box as cts:box, $region as cts:region*, $options as xs:string*) as xs:boolean external;
declare %a:since("marklogic", "5.0") function cts:box-north($box as cts:box) as xs:float external;
declare %a:since("marklogic", "5.0") function cts:box-south($box as cts:box) as xs:float external;
declare %a:since("marklogic", "5.0") function cts:box-west($box as cts:box) as xs:float external;
declare %a:since("marklogic", "5.0") function cts:circle($radius as xs:float, $center as cts:point) as cts:circle external;
declare %a:since("marklogic", "5.0") function cts:circle-center($circle as cts:circle) as cts:point external;
declare %a:since("marklogic", "5.0") function cts:circle-intersects($circle as cts:circle, $region as cts:region*) as xs:boolean external;
declare %a:since("marklogic", "5.0") function cts:circle-intersects($circle as cts:circle, $region as cts:region*, $options as xs:string*) as xs:boolean external;
declare %a:since("marklogic", "5.0") function cts:circle-radius($circle as cts:circle) as xs:float external;
declare %a:since("marklogic", "5.0") function cts:classify($data-nodes as node()*, $classifier as element(cts:classifier), $options as element()?, $training-nodes as node()*) as element(cts:label)* external;
declare %a:since("marklogic", "5.0") function cts:cluster($nodes as node()*) as element(cts:clustering) external;
declare %a:since("marklogic", "5.0") function cts:cluster($nodes as node()*, $options as element()?) as element(cts:clustering) external;
declare %a:since("marklogic", "5.0") function cts:collection-match($pattern as xs:string) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:collection-match($pattern as xs:string, $options as xs:string*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:collection-match($pattern as xs:string, $options as xs:string*, $query as cts:query?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:collection-match($pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:collection-match($pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:collection-query($uris as xs:string*) as cts:collection-query external;
declare %a:since("marklogic", "5.0") function cts:collection-query-uris($query as cts:collection-query) as xs:string* external;
declare %a:since("marklogic", "6.0") function cts:collection-reference() as cts:reference external;
declare %a:since("marklogic", "6.0") function cts:collection-reference($options as xs:string) as cts:reference external;
declare %a:since("marklogic", "5.0") function cts:collections() as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:collections($start as xs:string?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:collections($start as xs:string?, $options as xs:string*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:collections($start as xs:string?, $options as xs:string*, $query as cts:query?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:collections($start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:collections($start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:complex-polygon($outer as cts:polygon, $inner as cts:polygon*) as cts:complex-polygon external;
declare %a:since("marklogic", "5.0") function cts:complex-polygon-contains($complex-polygon as cts:complex-polygon, $region as cts:region*) as xs:boolean external;
declare %a:since("marklogic", "5.0") function cts:complex-polygon-contains($complex-polygon as cts:complex-polygon, $region as cts:region*, $options as xs:string*) as xs:boolean external;
declare %a:since("marklogic", "5.0") function cts:complex-polygon-inner($complexPolygon as cts:complex-polygon) as cts:polygon* external;
declare %a:since("marklogic", "5.0") function cts:complex-polygon-intersects($complex-polygon as cts:complex-polygon, $region as cts:region*) as xs:boolean external;
declare %a:since("marklogic", "5.0") function cts:complex-polygon-intersects($complex-polygon as cts:complex-polygon, $region as cts:region*, $options as xs:string*) as xs:boolean external;
declare %a:since("marklogic", "5.0") function cts:complex-polygon-outer($complexPolygon as cts:complex-polygon) as cts:polygon? external;
declare %a:since("marklogic", "5.0") function cts:confidence() as xs:float external;
declare %a:since("marklogic", "5.0") function cts:confidence($node as node()) as xs:float external;
declare %a:since("marklogic", "5.0") function cts:contains($nodes as node()*, $query as cts:query) as xs:boolean? external;
declare %a:since("marklogic", "6.0") function cts:correlation($value1 as cts:reference, $value2 as cts:reference) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:correlation($value1 as cts:reference, $value2 as cts:reference, $options as xs:string*) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:correlation($value1 as cts:reference, $value2 as cts:reference, $options as xs:string*, $query as cts:query?) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:correlation($value1 as cts:reference, $value2 as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*) as xs:double? external;
declare %a:since("marklogic", "5.0") function cts:count($arg as item()*) as xs:integer external;
declare %a:since("marklogic", "5.0") function cts:count($arg as item()*, $maximum as xs:double) as xs:integer external;
declare %a:since("marklogic", "6.0") function cts:count-aggregate($range-index as cts:reference) as xs:integer external;
declare %a:since("marklogic", "6.0") function cts:count-aggregate($range-index as cts:reference, $options as xs:string*) as xs:integer external;
declare %a:since("marklogic", "6.0") function cts:count-aggregate($range-index as cts:reference, $options as xs:string*, $query as cts:query?) as xs:integer external;
declare %a:since("marklogic", "6.0") function cts:count-aggregate($range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*) as xs:integer external;
declare %a:since("marklogic", "6.0") function cts:covariance($value1 as cts:reference, $value2 as cts:reference) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:covariance($value1 as cts:reference, $value2 as cts:reference, $options as xs:string*) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:covariance($value1 as cts:reference, $value2 as cts:reference, $options as xs:string*, $query as cts:query?) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:covariance($value1 as cts:reference, $value2 as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:covariance-p($value1 as cts:reference, $value2 as cts:reference) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:covariance-p($value1 as cts:reference, $value2 as cts:reference, $options as xs:string*) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:covariance-p($value1 as cts:reference, $value2 as cts:reference, $options as xs:string*, $query as cts:query?) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:covariance-p($value1 as cts:reference, $value2 as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*) as xs:double? external;
declare %a:since("marklogic", "5.0") function cts:deregister($id as xs:unsignedLong) as empty-sequence() external;
declare %a:since("marklogic", "5.0") function cts:destination($p as cts:point, $bearing as xs:double, $distance as xs:double) as cts:point external;
declare %a:since("marklogic", "5.0") function cts:destination($p as cts:point, $bearing as xs:double, $distance as xs:double, $options as xs:string*) as cts:point external;
declare %a:since("marklogic", "5.0") function cts:directory-query($uris as xs:string*) as cts:directory-query external;
declare %a:since("marklogic", "5.0") function cts:directory-query($uris as xs:string*, $depth as xs:string?) as cts:directory-query external;
declare %a:since("marklogic", "5.0") function cts:directory-query-depth($query as cts:directory-query) as xs:string external;
declare %a:since("marklogic", "5.0") function cts:directory-query-uris($query as cts:directory-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:distance($p1 as cts:point, $p2 as cts:point) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:distance($p1 as cts:point, $p2 as cts:point, $options as xs:string*) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:distinctive-terms($nodes as node()*) as element(cts:class) external;
declare %a:since("marklogic", "5.0") function cts:distinctive-terms($nodes as node()*, $options as element()?) as element(cts:class) external;
declare %a:since("marklogic", "5.0") function cts:document-fragment-query($query as cts:query) as cts:document-fragment-query external;
declare %a:since("marklogic", "5.0") function cts:document-fragment-query-query($query as cts:document-fragment-query) as cts:query external;
declare %a:since("marklogic", "5.0") function cts:document-query($uris as xs:string*) as cts:document-query external;
declare %a:since("marklogic", "5.0") function cts:document-query-uris($query as cts:document-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-boxes($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-boxes($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-boxes($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-boxes($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-boxes($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-boxes($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-boxes($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-query($element-name as xs:QName*, $latitude-attribute-names as xs:QName*, $longitude-attribute-names as xs:QName*, $regions as cts:region*) as cts:element-attribute-pair-geospatial-query external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-query($element-name as xs:QName*, $latitude-attribute-names as xs:QName*, $longitude-attribute-names as xs:QName*, $regions as cts:region*, $options as xs:string*) as cts:element-attribute-pair-geospatial-query external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-query($element-name as xs:QName*, $latitude-attribute-names as xs:QName*, $longitude-attribute-names as xs:QName*, $regions as cts:region*, $options as xs:string*, $weight as xs:double?) as cts:element-attribute-pair-geospatial-query external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-query-element-name($query as cts:element-attribute-pair-geospatial-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-query-latitude-name($query as cts:element-attribute-pair-geospatial-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-query-longitude-name($query as cts:element-attribute-pair-geospatial-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-query-options($query as cts:element-attribute-pair-geospatial-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-query-region($query as cts:element-attribute-pair-geospatial-query) as cts:region* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-query-weight($query as cts:element-attribute-pair-geospatial-query) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-value-match($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-value-match($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-value-match($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-value-match($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-value-match($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-values($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-values($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-values($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-values($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-values($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-pair-geospatial-values($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-range-query($element-name as xs:QName*, $attribute-name as xs:QName*, $operator as xs:string, $value as xs:anyAtomicType*) as cts:element-attribute-range-query external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-range-query($element-name as xs:QName*, $attribute-name as xs:QName*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*) as cts:element-attribute-range-query external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-range-query($element-name as xs:QName*, $attribute-name as xs:QName*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*, $weight as xs:double?) as cts:element-attribute-range-query external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-range-query-attribute-name($query as cts:element-attribute-range-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-range-query-element-name($query as cts:element-attribute-range-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-range-query-operator($query as cts:element-attribute-range-query) (: as [5.0]xs:anyAtomicType* [6.0]xs:string :) external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-range-query-options($query as cts:element-attribute-range-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-range-query-value($query as cts:element-attribute-range-query) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-range-query-weight($query as cts:element-attribute-range-query) as xs:double external;
declare %a:since("marklogic", "6.0") function cts:element-attribute-reference($element as xs:QName, $attribute as xs:QName) as cts:reference external;
declare %a:since("marklogic", "6.0") function cts:element-attribute-reference($element as xs:QName, $attribute as xs:QName, $options as xs:string) as cts:reference external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-co-occurrences($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $element-name-2 as xs:QName, $attribute-name-2 as xs:QName?) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-co-occurrences($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $element-name-2 as xs:QName, $attribute-name-2 as xs:QName?, $options as xs:string*) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-co-occurrences($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $element-name-2 as xs:QName, $attribute-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-co-occurrences($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $element-name-2 as xs:QName, $attribute-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-co-occurrences($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $element-name-2 as xs:QName, $attribute-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-geospatial-co-occurrences($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-geospatial-co-occurrences($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-geospatial-co-occurrences($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-geospatial-co-occurrences($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-geospatial-co-occurrences($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-match($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:anyAtomicType) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-match($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-match($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-match($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-match($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-query($element-name as xs:QName*, $attribute-name as xs:QName*, $text as xs:string*) as cts:element-attribute-value-query external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-query($element-name as xs:QName*, $attribute-name as xs:QName*, $text as xs:string*, $options as xs:string*) as cts:element-attribute-value-query external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-query($element-name as xs:QName*, $attribute-name as xs:QName*, $text as xs:string*, $options as xs:string*, $weight as xs:double?) as cts:element-attribute-value-query external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-query-attribute-name($query as cts:element-attribute-value-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-query-element-name($query as cts:element-attribute-value-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-query-options($query as cts:element-attribute-value-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-query-text($query as cts:element-attribute-value-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-query-weight($query as cts:element-attribute-value-query) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-ranges($element-names as xs:QName*, $attribute-names as xs:QName*) as element(cts:range)* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-ranges($element-names as xs:QName*, $attribute-names as xs:QName*, $bounds as xs:anyAtomicType*) as element(cts:range)* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-ranges($element-names as xs:QName*, $attribute-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*) as element(cts:range)* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-ranges($element-names as xs:QName*, $attribute-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?) as element(cts:range)* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-ranges($element-names as xs:QName*, $attribute-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as element(cts:range)* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-value-ranges($element-names as xs:QName*, $attribute-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as element(cts:range)* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-values($element-names as xs:QName*, $attribute-names as xs:QName*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-values($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:anyAtomicType?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-values($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-values($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-values($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-values($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-word-match($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:string) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-word-match($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:string, $options as xs:string*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-word-match($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:string, $options as xs:string*, $query as cts:query?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-word-match($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-word-match($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-word-query($element-name as xs:QName*, $attribute-name as xs:QName*, $text as xs:string*) as cts:element-attribute-word-query external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-word-query($element-name as xs:QName*, $attribute-name as xs:QName*, $text as xs:string*, $options as xs:string*) as cts:element-attribute-word-query external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-word-query($element-name as xs:QName*, $attribute-name as xs:QName*, $text as xs:string*, $options as xs:string*, $weight as xs:double?) as cts:element-attribute-word-query external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-word-query-attribute-name($query as cts:element-attribute-word-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-word-query-element-name($query as cts:element-attribute-word-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-word-query-options($query as cts:element-attribute-word-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-word-query-text($query as cts:element-attribute-word-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-word-query-weight($query as cts:element-attribute-word-query) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-words($element-names as xs:QName*, $attribute-names as xs:QName*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-words($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:string?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-words($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:string?, $options as xs:string*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-words($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:string?, $options as xs:string*, $query as cts:query?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-words($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-attribute-words($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-boxes($parent-element-names as xs:QName*, $child-element-names as xs:QName*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-boxes($parent-element-names as xs:QName*, $child-element-names as xs:QName*, $latitude-bounds as xs:double*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-boxes($parent-element-names as xs:QName*, $child-element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-boxes($parent-element-names as xs:QName*, $child-element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-boxes($parent-element-names as xs:QName*, $child-element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-boxes($parent-element-names as xs:QName*, $child-element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-boxes($parent-element-names as xs:QName*, $child-element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-query($parent-element-name as xs:QName*, $child-element-names as xs:QName*, $regions as cts:region*) as cts:element-child-geospatial-query external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-query($parent-element-name as xs:QName*, $child-element-names as xs:QName*, $regions as cts:region*, $options as xs:string*) as cts:element-child-geospatial-query external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-query($parent-element-name as xs:QName*, $child-element-names as xs:QName*, $regions as cts:region*, $options as xs:string*, $weight as xs:double?) as cts:element-child-geospatial-query external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-query-child-name($query as cts:element-child-geospatial-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-query-element-name($query as cts:element-child-geospatial-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-query-options($query as cts:element-child-geospatial-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-query-region($query as cts:element-child-geospatial-query) as cts:region* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-query-weight($query as cts:element-child-geospatial-query) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-value-match($element-names as xs:QName*, $child-names as xs:QName*, $pattern as xs:anyAtomicType) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-value-match($element-names as xs:QName*, $child-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-value-match($element-names as xs:QName*, $child-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-value-match($element-names as xs:QName*, $child-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-value-match($element-names as xs:QName*, $child-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-values($element-names as xs:QName*, $child-names as xs:QName*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-values($element-names as xs:QName*, $child-names as xs:QName*, $start as cts:point?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-values($element-names as xs:QName*, $child-names as xs:QName*, $start as cts:point?, $options as xs:string*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-values($element-names as xs:QName*, $child-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-values($element-names as xs:QName*, $child-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-child-geospatial-values($element-names as xs:QName*, $child-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-boxes($element-names as xs:QName*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-boxes($element-names as xs:QName*, $latitude-bounds as xs:double*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-boxes($element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-boxes($element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-boxes($element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-boxes($element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-boxes($element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-query($element-name as xs:QName*, $regions as cts:region*) as cts:element-geospatial-query external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-query($element-name as xs:QName*, $regions as cts:region*, $options as xs:string*) as cts:element-geospatial-query external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-query($element-name as xs:QName*, $regions as cts:region*, $options as xs:string*, $weight as xs:double?) as cts:element-geospatial-query external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-query-element-name($query as cts:element-geospatial-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-query-options($query as cts:element-geospatial-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-query-region($query as cts:element-geospatial-query) (: as [5.0]cts:box* [6.0]cts:region* :) external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-query-weight($query as cts:element-geospatial-query) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-value-match($element-names as xs:QName*, $pattern as xs:anyAtomicType) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-value-match($element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-value-match($element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-value-match($element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-value-match($element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-values($element-names as xs:QName*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-values($element-names as xs:QName*, $start as cts:point?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-values($element-names as xs:QName*, $start as cts:point?, $options as xs:string*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-values($element-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-values($element-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-geospatial-values($element-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-boxes($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-boxes($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-boxes($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-boxes($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-boxes($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-boxes($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-boxes($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as cts:box* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-query($element-name as xs:QName*, $latitude-element-names as xs:QName*, $longitude-element-names as xs:QName*, $regions as cts:region*) as cts:element-pair-geospatial-query external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-query($element-name as xs:QName*, $latitude-element-names as xs:QName*, $longitude-element-names as xs:QName*, $regions as cts:region*, $options as xs:string*) as cts:element-pair-geospatial-query external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-query($element-name as xs:QName*, $latitude-element-names as xs:QName*, $longitude-element-names as xs:QName*, $regions as cts:region*, $options as xs:string*, $weight as xs:double?) as cts:element-pair-geospatial-query external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-query-element-name($query as cts:element-pair-geospatial-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-query-latitude-name($query as cts:element-pair-geospatial-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-query-longitude-name($query as cts:element-pair-geospatial-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-query-options($query as cts:element-pair-geospatial-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-query-region($query as cts:element-pair-geospatial-query) as cts:region* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-query-weight($query as cts:element-pair-geospatial-query) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-value-match($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-value-match($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-value-match($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-value-match($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-value-match($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-values($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-values($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-values($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-values($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-values($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-pair-geospatial-values($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:element-query($element-name as xs:QName*, $query as cts:query) as cts:element-query external;
declare %a:since("marklogic", "5.0") function cts:element-query-element-name($query as cts:element-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-query-query($query as cts:element-query) as cts:query external;
declare %a:since("marklogic", "5.0") function cts:element-range-query($element-name as xs:QName*, $operator as xs:string, $value as xs:anyAtomicType*) as cts:element-range-query external;
declare %a:since("marklogic", "5.0") function cts:element-range-query($element-name as xs:QName*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*) as cts:element-range-query external;
declare %a:since("marklogic", "5.0") function cts:element-range-query($element-name as xs:QName*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*, $weight as xs:double?) as cts:element-range-query external;
declare %a:since("marklogic", "5.0") function cts:element-range-query-element-name($query as cts:element-range-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-range-query-operator($query as cts:element-range-query) (: as [5.0]xs:anyAtomicType* [6.0]xs:string :) external;
declare %a:since("marklogic", "5.0") function cts:element-range-query-options($query as cts:element-range-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-range-query-value($query as cts:element-range-query) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-range-query-weight($query as cts:element-range-query) as xs:double external;
declare %a:since("marklogic", "6.0") function cts:element-reference($element as xs:QName) as cts:reference external;
declare %a:since("marklogic", "6.0") function cts:element-reference($element as xs:QName, $options as xs:string) as cts:reference external;
declare %a:since("marklogic", "5.0") function cts:element-value-co-occurrences($element-name-1 as xs:QName, $element-name-2 as xs:QName) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-value-co-occurrences($element-name-1 as xs:QName, $element-name-2 as xs:QName, $options as xs:string*) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-value-co-occurrences($element-name-1 as xs:QName, $element-name-2 as xs:QName, $options as xs:string*, $query as cts:query?) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-value-co-occurrences($element-name-1 as xs:QName, $element-name-2 as xs:QName, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-value-co-occurrences($element-name-1 as xs:QName, $element-name-2 as xs:QName, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-value-geospatial-co-occurrences($element-name-1 as xs:QName, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-value-geospatial-co-occurrences($element-name-1 as xs:QName, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-value-geospatial-co-occurrences($element-name-1 as xs:QName, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-value-geospatial-co-occurrences($element-name-1 as xs:QName, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-value-geospatial-co-occurrences($element-name-1 as xs:QName, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:element-value-match($element-names as xs:QName*, $pattern as xs:anyAtomicType) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-value-match($element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-value-match($element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-value-match($element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-value-match($element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-value-query($element-name as xs:QName*, $text as xs:string*) as cts:element-value-query external;
declare %a:since("marklogic", "5.0") function cts:element-value-query($element-name as xs:QName*, $text as xs:string*, $options as xs:string*) as cts:element-value-query external;
declare %a:since("marklogic", "5.0") function cts:element-value-query($element-name as xs:QName*, $text as xs:string*, $options as xs:string*, $weight as xs:double?) as cts:element-value-query external;
declare %a:since("marklogic", "5.0") function cts:element-value-query-element-name($query as cts:element-value-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-value-query-options($query as cts:element-value-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-value-query-text($query as cts:element-value-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-value-query-weight($query as cts:element-value-query) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:element-value-ranges($element-names as xs:QName*) as element(cts:range)* external;
declare %a:since("marklogic", "5.0") function cts:element-value-ranges($element-names as xs:QName*, $bounds as xs:anyAtomicType*) as element(cts:range)* external;
declare %a:since("marklogic", "5.0") function cts:element-value-ranges($element-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*) as element(cts:range)* external;
declare %a:since("marklogic", "5.0") function cts:element-value-ranges($element-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?) as element(cts:range)* external;
declare %a:since("marklogic", "5.0") function cts:element-value-ranges($element-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as element(cts:range)* external;
declare %a:since("marklogic", "5.0") function cts:element-value-ranges($element-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as element(cts:range)* external;
declare %a:since("marklogic", "5.0") function cts:element-values($element-names as xs:QName*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-values($element-names as xs:QName*, $start as xs:anyAtomicType?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-values($element-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-values($element-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-values($element-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:element-values($element-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "6.0") function cts:element-walk($node as node(), $element as xs:QName*, $expr as item()*) as node() external;
declare %a:since("marklogic", "5.0") function cts:element-word-match($element-names as xs:QName*, $pattern as xs:string) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-word-match($element-names as xs:QName*, $pattern as xs:string, $options as xs:string*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-word-match($element-names as xs:QName*, $pattern as xs:string, $options as xs:string*, $query as cts:query?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-word-match($element-names as xs:QName*, $pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-word-match($element-names as xs:QName*, $pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-word-query($element-name as xs:QName*, $text as xs:string*) as cts:element-word-query external;
declare %a:since("marklogic", "5.0") function cts:element-word-query($element-name as xs:QName*, $text as xs:string*, $options as xs:string*) as cts:element-word-query external;
declare %a:since("marklogic", "5.0") function cts:element-word-query($element-name as xs:QName*, $text as xs:string*, $options as xs:string*, $weight as xs:double?) as cts:element-word-query external;
declare %a:since("marklogic", "5.0") function cts:element-word-query-element-name($query as cts:element-word-query) as xs:QName* external;
declare %a:since("marklogic", "5.0") function cts:element-word-query-options($query as cts:element-word-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-word-query-text($query as cts:element-word-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-word-query-weight($query as cts:element-word-query) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:element-words($element-names as xs:QName*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-words($element-names as xs:QName*, $start as xs:string?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-words($element-names as xs:QName*, $start as xs:string?, $options as xs:string*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-words($element-names as xs:QName*, $start as xs:string?, $options as xs:string*, $query as cts:query?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-words($element-names as xs:QName*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:element-words($element-names as xs:QName*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:entity-highlight($node as node(), $expr as item()*) as node() external;
declare %a:since("marklogic", "5.0") function cts:field-range-query($field-name as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*) as cts:field-range-query external;
declare %a:since("marklogic", "5.0") function cts:field-range-query($field-name as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*) as cts:field-range-query external;
declare %a:since("marklogic", "5.0") function cts:field-range-query($field-name as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*, $weight as xs:double?) as cts:field-range-query external;
declare %a:since("marklogic", "5.0") function cts:field-range-query-field-name($query as cts:field-range-query) (: as [5.0]xs:string [6.0]xs:string* :) external;
declare %a:since("marklogic", "5.0") function cts:field-range-query-operator($query as cts:field-range-query) (: as [5.0]xs:anyAtomicType* [6.0]xs:string :) external;
declare %a:since("marklogic", "5.0") function cts:field-range-query-options($query as cts:field-range-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:field-range-query-value($query as cts:field-range-query) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:field-range-query-weight($query as cts:field-range-query) as xs:double external;
declare %a:since("marklogic", "6.0") function cts:field-reference($field as xs:string) as cts:reference external;
declare %a:since("marklogic", "6.0") function cts:field-reference($field as xs:string, $options as xs:string) as cts:reference external;
declare %a:since("marklogic", "5.0") function cts:field-value-co-occurrences($field-name-1 as xs:string, $field-name-2 as xs:string) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:field-value-co-occurrences($field-name-1 as xs:string, $field-name-2 as xs:string, $options as xs:string*) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:field-value-co-occurrences($field-name-1 as xs:string, $field-name-2 as xs:string, $options as xs:string*, $query as cts:query?) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:field-value-co-occurrences($field-name-1 as xs:string, $field-name-2 as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:field-value-co-occurrences($field-name-1 as xs:string, $field-name-2 as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:field-value-match($field-names as xs:string*, $pattern as xs:anyAtomicType) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:field-value-match($field-names as xs:string*, $pattern as xs:anyAtomicType, $options as xs:string*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:field-value-match($field-names as xs:string*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:field-value-match($field-names as xs:string*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:field-value-match($field-names as xs:string*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:field-value-query($field-name as xs:string*, $text as xs:string*) as cts:field-value-query external;
declare %a:since("marklogic", "5.0") function cts:field-value-query($field-name as xs:string*, $text as xs:string*, $options as xs:string*) as cts:field-value-query external;
declare %a:since("marklogic", "5.0") function cts:field-value-query($field-name as xs:string*, $text as xs:string*, $options as xs:string*, $weight as xs:double?) as cts:field-value-query external;
declare %a:since("marklogic", "5.0") function cts:field-value-query-field-name($query as cts:field-value-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:field-value-query-options($query as cts:field-value-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:field-value-query-text($query as cts:field-value-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:field-value-query-weight($query as cts:field-value-query) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:field-value-ranges($field-names as xs:string*) as element(cts:range)* external;
declare %a:since("marklogic", "5.0") function cts:field-value-ranges($field-names as xs:string*, $bounds as xs:anyAtomicType*) as element(cts:range)* external;
declare %a:since("marklogic", "5.0") function cts:field-value-ranges($field-names as xs:string*, $bounds as xs:anyAtomicType*, $options as xs:string*) as element(cts:range)* external;
declare %a:since("marklogic", "5.0") function cts:field-value-ranges($field-names as xs:string*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?) as element(cts:range)* external;
declare %a:since("marklogic", "5.0") function cts:field-value-ranges($field-names as xs:string*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as element(cts:range)* external;
declare %a:since("marklogic", "5.0") function cts:field-value-ranges($field-names as xs:string*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as element(cts:range)* external;
declare %a:since("marklogic", "5.0") function cts:field-values($field-names as xs:string*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:field-values($field-names as xs:string*, $start as xs:anyAtomicType?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:field-values($field-names as xs:string*, $start as xs:anyAtomicType?, $options as xs:string*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:field-values($field-names as xs:string*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:field-values($field-names as xs:string*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:field-values($field-names as xs:string*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "5.0") function cts:field-word-match($field-names as xs:string*, $pattern as xs:string) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:field-word-match($field-names as xs:string*, $pattern as xs:string, $options as xs:string*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:field-word-match($field-names as xs:string*, $pattern as xs:string, $options as xs:string*, $query as cts:query?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:field-word-match($field-names as xs:string*, $pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:field-word-match($field-names as xs:string*, $pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:field-word-query($field-name as xs:string*, $text as xs:string*) as cts:field-word-query external;
declare %a:since("marklogic", "5.0") function cts:field-word-query($field-name as xs:string*, $text as xs:string*, $options as xs:string*) as cts:field-word-query external;
declare %a:since("marklogic", "5.0") function cts:field-word-query($field-name as xs:string*, $text as xs:string*, $options as xs:string*, $weight as xs:double?) as cts:field-word-query external;
declare %a:since("marklogic", "5.0") function cts:field-word-query-field-name($query as cts:field-word-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:field-word-query-options($query as cts:field-word-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:field-word-query-text($query as cts:field-word-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:field-word-query-weight($query as cts:field-word-query) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:field-words($field-names as xs:string*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:field-words($field-names as xs:string*, $start as xs:string?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:field-words($field-names as xs:string*, $start as xs:string?, $options as xs:string*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:field-words($field-names as xs:string*, $start as xs:string?, $options as xs:string*, $query as cts:query?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:field-words($field-names as xs:string*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:field-words($field-names as xs:string*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:fitness() as xs:float external;
declare %a:since("marklogic", "5.0") function cts:fitness($node as node()) as xs:float external;
declare %a:since("marklogic", "5.0") function cts:frequency($value as item()) as xs:integer external;
declare %a:since("marklogic", "6.0") function cts:geospatial-attribute-pair-reference($element as xs:string, $lat as xs:string, $long as xs:string, $options as xs:string) as cts:reference external;
declare %a:since("marklogic", "5.0") function cts:geospatial-co-occurrences($geo-element-name-1 as xs:QName, $child-1-name-1 as xs:QName?, $child-1-name-2 as xs:QName?, $geo-element-name-2 as xs:QName, $child-2-name-1 as xs:QName?, $child-2-name-2 as xs:QName?) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:geospatial-co-occurrences($geo-element-name-1 as xs:QName, $child-1-name-1 as xs:QName?, $child-1-name-2 as xs:QName?, $geo-element-name-2 as xs:QName, $child-2-name-1 as xs:QName?, $child-2-name-2 as xs:QName?, $options as xs:string*) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:geospatial-co-occurrences($geo-element-name-1 as xs:QName, $child-1-name-1 as xs:QName?, $child-1-name-2 as xs:QName?, $geo-element-name-2 as xs:QName, $child-2-name-1 as xs:QName?, $child-2-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:geospatial-co-occurrences($geo-element-name-1 as xs:QName, $child-1-name-1 as xs:QName?, $child-1-name-2 as xs:QName?, $geo-element-name-2 as xs:QName, $child-2-name-1 as xs:QName?, $child-2-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "5.0") function cts:geospatial-co-occurrences($geo-element-name-1 as xs:QName, $child-1-name-1 as xs:QName?, $child-1-name-2 as xs:QName?, $geo-element-name-2 as xs:QName, $child-2-name-1 as xs:QName?, $child-2-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "6.0") function cts:geospatial-element-child-reference($element as xs:string, $child as xs:string, $options as xs:string) as cts:reference external;
declare %a:since("marklogic", "6.0") function cts:geospatial-element-pair-reference($element as xs:string, $lat as xs:string, $long as xs:string, $options as xs:string) as cts:reference external;
declare %a:since("marklogic", "6.0") function cts:geospatial-element-reference($element as xs:string, $options as xs:string) as cts:reference external;
declare %a:since("marklogic", "5.0") function cts:highlight($node as node(), $query as cts:query, $expr as item()*) as node() external;
declare %a:since("marklogic", "6.0") function cts:linear-model($values as cts:reference*) as math:linear-model? external;
declare %a:since("marklogic", "6.0") function cts:linear-model($values as cts:reference*, $options as xs:string*) as math:linear-model? external;
declare %a:since("marklogic", "6.0") function cts:linear-model($values as cts:reference*, $options as xs:string*, $query as cts:query?) as math:linear-model? external;
declare %a:since("marklogic", "6.0") function cts:linear-model($values as cts:reference*, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*) as math:linear-model? external;
declare %a:since("marklogic", "5.0") function cts:linestring($vertices as cts:point*) as cts:linestring external;
declare %a:since("marklogic", "5.0") function cts:linestring-vertices($linestring as cts:linestring) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:locks-query($query as cts:query) as cts:locks-query external;
declare %a:since("marklogic", "5.0") function cts:locks-query-query($query as cts:locks-query) as cts:query external;
declare %a:since("marklogic", "6.0") function cts:max($range-index as cts:reference) as xs:anyAtomicType? external;
declare %a:since("marklogic", "6.0") function cts:max($range-index as cts:reference, $options as xs:string*) as xs:anyAtomicType? external;
declare %a:since("marklogic", "6.0") function cts:max($range-index as cts:reference, $options as xs:string*, $query as cts:query?) as xs:anyAtomicType? external;
declare %a:since("marklogic", "6.0") function cts:max($range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*) as xs:anyAtomicType? external;
declare %a:since("marklogic", "6.0") function cts:median($arg as xs:double*) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:min($range-index as cts:reference) as xs:anyAtomicType? external;
declare %a:since("marklogic", "6.0") function cts:min($range-index as cts:reference, $options as xs:string*) as xs:anyAtomicType? external;
declare %a:since("marklogic", "6.0") function cts:min($range-index as cts:reference, $options as xs:string*, $query as cts:query?) as xs:anyAtomicType? external;
declare %a:since("marklogic", "6.0") function cts:min($range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*) as xs:anyAtomicType? external;
declare %a:since("marklogic", "5.0") function cts:near-query($queries as cts:query*) as cts:near-query external;
declare %a:since("marklogic", "5.0") function cts:near-query($queries as cts:query*, $distance as xs:double?) as cts:near-query external;
declare %a:since("marklogic", "5.0") function cts:near-query($queries as cts:query*, $distance as xs:double?, $options as xs:string*) as cts:near-query external;
declare %a:since("marklogic", "5.0") function cts:near-query($queries as cts:query*, $distance as xs:double?, $options as xs:string*, $distance-weight as xs:double?) as cts:near-query external;
declare %a:since("marklogic", "5.0") function cts:near-query-distance($query as cts:near-query) as xs:integer external;
declare %a:since("marklogic", "5.0") function cts:near-query-options($query as cts:near-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:near-query-queries($query as cts:near-query) (: as [5.0]cts:query [6.0]cts:query* :) external;
declare %a:since("marklogic", "5.0") function cts:near-query-weight($query as cts:near-query) as xs:double external;
declare %a:since("marklogic", "6.0") function cts:not-in-query($positive-query as cts:query, $negative-query as cts:query) as cts:not-in-query external;
declare %a:since("marklogic", "6.0") function cts:not-in-query-negative-query($query as cts:not-in-query) as cts:query external;
declare %a:since("marklogic", "6.0") function cts:not-in-query-positive-query($query as cts:not-in-query) as cts:query external;
declare %a:since("marklogic", "5.0") function cts:not-query($query as cts:query) as cts:not-query external;
declare %a:since("marklogic", "5.0") function cts:not-query-query($query as cts:not-query) as cts:query external;
declare %a:since("marklogic", "5.0") function cts:not-query-weight($query as cts:element-query) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:or-query($queries as cts:query*) as cts:or-query external;
declare %a:since("marklogic", "5.0") function cts:or-query-queries($query as cts:or-query) as cts:query* external;
declare %a:since("marklogic", "5.0") function cts:parse-wkt($wtk as xs:string*) as cts:region* external;
declare %a:since("marklogic", "6.0") function cts:path-range-query($path-expression as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*) as cts:path-range-query external;
declare %a:since("marklogic", "6.0") function cts:path-range-query($path-expression as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*) as cts:path-range-query external;
declare %a:since("marklogic", "6.0") function cts:path-range-query($path-expression as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*, $weight as xs:double?) as cts:path-range-query external;
declare %a:since("marklogic", "6.0") function cts:path-range-query-operator($query as cts:path-range-query) as xs:string external;
declare %a:since("marklogic", "6.0") function cts:path-range-query-options($query as cts:path-range-query) as xs:string* external;
declare %a:since("marklogic", "6.0") function cts:path-range-query-path-name($query as cts:path-range-query) as xs:string* external;
declare %a:since("marklogic", "6.0") function cts:path-range-query-value($query as cts:path-range-query) as xs:anyAtomicType* external;
declare %a:since("marklogic", "6.0") function cts:path-range-query-weight($query as cts:path-range-query) as xs:double external;
declare %a:since("marklogic", "6.0") function cts:path-reference($path-expression as xs:string) as cts:reference external;
declare %a:since("marklogic", "6.0") function cts:path-reference($path-expression as xs:string, $options as xs:string) as cts:reference external;
declare %a:since("marklogic", "6.0") function cts:percent-rank($arg as xs:anyAtomicType*, $value as xs:anyAtomicType) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:percent-rank($arg as xs:anyAtomicType*, $value as xs:anyAtomicType, $options as xs:string*) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:percentile($arg as xs:double*, $p as xs:double*) as xs:double* external;
declare %a:since("marklogic", "5.0") function cts:point($latitude as xs:float, $longitude as xs:float) as cts:point external;
declare %a:since("marklogic", "5.0") function cts:point-latitude($point as cts:point) as xs:float external;
declare %a:since("marklogic", "5.0") function cts:point-longitude($point as cts:point) as xs:float external;
declare %a:since("marklogic", "5.0") function cts:polygon($vertices as cts:point*) as cts:polygon external;
declare %a:since("marklogic", "5.0") function cts:polygon-contains($polygon as cts:polygon, $region as cts:region*) as xs:boolean external;
declare %a:since("marklogic", "5.0") function cts:polygon-contains($polygon as cts:polygon, $region as cts:region*, $options as xs:string*) as xs:boolean external;
declare %a:since("marklogic", "5.0") function cts:polygon-intersects($polygon as cts:polygon, $region as cts:region*) as xs:boolean external;
declare %a:since("marklogic", "5.0") function cts:polygon-intersects($polygon as cts:polygon, $region as cts:region*, $options as xs:string*) as xs:boolean external;
declare %a:since("marklogic", "5.0") function cts:polygon-vertices($polygon as cts:polygon) as cts:point* external;
declare %a:since("marklogic", "5.0") function cts:properties-query($query as cts:query) as cts:properties-query external;
declare %a:since("marklogic", "5.0") function cts:properties-query-query($query as cts:properties-query) as cts:query external;
declare %a:since("marklogic", "5.0") function cts:quality() as xs:integer external;
declare %a:since("marklogic", "5.0") function cts:quality($node as node()) as xs:integer external;
declare %a:since("marklogic", "5.0") function cts:query() as cts:query external;
declare %a:since("marklogic", "5.0") function cts:query($query as element()) as cts:query external;
declare %a:since("marklogic", "6.0") function cts:rank($arg as xs:anyAtomicType*, $value as xs:anyAtomicType) as xs:integer? external;
declare %a:since("marklogic", "6.0") function cts:rank($arg as xs:anyAtomicType*, $value as xs:anyAtomicType, $options as xs:string*) as xs:integer? external;
declare %a:since("marklogic", "5.0") function cts:register($query as cts:query) as xs:unsignedLong external;
declare %a:since("marklogic", "5.0") function cts:registered-query($ids as xs:unsignedLong*) as cts:registered-query external;
declare %a:since("marklogic", "5.0") function cts:registered-query($ids as xs:unsignedLong*, $options as xs:string*) as cts:registered-query external;
declare %a:since("marklogic", "5.0") function cts:registered-query($ids as xs:unsignedLong*, $options as xs:string*, $weight as xs:double?) as cts:registered-query external;
declare %a:since("marklogic", "5.0") function cts:registered-query-ids($query as cts:registered-query) as xs:unsignedLong* external;
declare %a:since("marklogic", "5.0") function cts:registered-query-options($query as cts:registered-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:registered-query-weight($query as cts:registered-query) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:remainder() as xs:integer external;
declare %a:since("marklogic", "5.0") function cts:remainder($node as node()) as xs:integer external;
declare %a:since("marklogic", "5.0") function cts:reverse-query($nodes as node()*) as cts:reverse-query external;
declare %a:since("marklogic", "5.0") function cts:reverse-query($nodes as node()*, $weight as xs:double?) as cts:reverse-query external;
declare %a:since("marklogic", "5.0") function cts:reverse-query-nodes($query as cts:reverse-query) as node()* external;
declare %a:since("marklogic", "5.0") function cts:reverse-query-weight($query as cts:reverse-query) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:score() as xs:integer external;
declare %a:since("marklogic", "5.0") function cts:score($node as node()) as xs:integer external;
declare %a:since("marklogic", "5.0") function cts:search($expression as node()*, $query as cts:query?) as node()* external;
declare %a:since("marklogic", "5.0") function cts:search($expression as node()*, $query as cts:query?, $options as xs:string*) as node()* external;
declare %a:since("marklogic", "5.0") function cts:search($expression as node()*, $query as cts:query?, $options as xs:string*, $quality-weight as xs:double?) as node()* external;
declare %a:since("marklogic", "5.0") function cts:search($expression as node()*, $query as cts:query?, $options as xs:string*, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as node()* external;
declare %a:since("marklogic", "5.0") function cts:shortest-distance($p1 as cts:point, $region as cts:region+) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:shortest-distance($p1 as cts:point, $region as cts:region+, $options as xs:string*) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:similar-query($nodes as node()*) as cts:similar-query external;
declare %a:since("marklogic", "5.0") function cts:similar-query($nodes as node()*, $weight as xs:double?) as cts:similar-query external;
declare %a:since("marklogic", "5.0") function cts:similar-query($nodes as node()*, $weight as xs:double?, $options as element()?) as cts:similar-query external;
declare %a:since("marklogic", "5.0") function cts:similar-query-nodes($query as cts:similar-query) as node()* external;
declare %a:since("marklogic", "5.0") function cts:similar-query-weight($query as cts:similar-query) as xs:double external;
declare %a:since("marklogic", "6.0") function cts:stddev($range-index as cts:reference) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:stddev($range-index as cts:reference, $options as xs:string*) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:stddev($range-index as cts:reference, $options as xs:string*, $query as cts:query?) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:stddev($range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:stddev-p($range-index as cts:reference) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:stddev-p($range-index as cts:reference, $options as xs:string*) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:stddev-p($range-index as cts:reference, $options as xs:string*, $query as cts:query?) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:stddev-p($range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*) as xs:double? external;
declare %a:since("marklogic", "5.0") function cts:stem($text as xs:string) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:stem($text as xs:string, $language as xs:string?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:sum($arg as xs:anyAtomicType*) as xs:anyAtomicType? external;
declare %a:since("marklogic", "5.0") function cts:sum($arg as xs:anyAtomicType*, $zero as xs:anyAtomicType?) as xs:anyAtomicType? external;
declare %a:since("marklogic", "6.0") function cts:sum-aggregate($range-index as cts:reference) as xs:anyAtomicType? external;
declare %a:since("marklogic", "6.0") function cts:sum-aggregate($range-index as cts:reference, $options as xs:string*) as xs:anyAtomicType? external;
declare %a:since("marklogic", "6.0") function cts:sum-aggregate($range-index as cts:reference, $options as xs:string*, $query as cts:query?) as xs:anyAtomicType? external;
declare %a:since("marklogic", "6.0") function cts:sum-aggregate($range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*) as xs:anyAtomicType? external;
declare %a:since("marklogic", "5.0") function cts:thresholds($computed-labels as element(cts:label)*, $known-labels as element(cts:label)*) as element(cts:thresholds)? external;
declare %a:since("marklogic", "5.0") function cts:thresholds($computed-labels as element(cts:label)*, $known-labels as element(cts:label)*, $recall-weight as xs:double?) as element(cts:thresholds)? external;
declare %a:since("marklogic", "5.0") function cts:to-wkt($wtk as cts:region*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:tokenize($text as xs:string) as cts:token* external;
declare %a:since("marklogic", "5.0") function cts:tokenize($text as xs:string, $language as xs:string?) as cts:token* external;
declare %a:since("marklogic", "5.0") function cts:train($training-nodes as node()*, $labels as element(cts:label)*) as element(cts:classifier)? external;
declare %a:since("marklogic", "5.0") function cts:train($training-nodes as node()*, $labels as element(cts:label)*, $options as element()?) as element(cts:classifier)? external;
declare %a:since("marklogic", "5.0") function cts:uri-match($pattern as xs:string) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:uri-match($pattern as xs:string, $options as xs:string*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:uri-match($pattern as xs:string, $options as xs:string*, $query as cts:query?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:uri-match($pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:uri-match($pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:string* external;
declare %a:since("marklogic", "6.0") function cts:uri-reference() as cts:reference external;
declare %a:since("marklogic", "5.0") function cts:uris() as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:uris($start as xs:string?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:uris($start as xs:string?, $options as xs:string*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:uris($start as xs:string?, $options as xs:string*, $query as cts:query?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:uris($start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:uris($start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:string* external;
declare %a:since("marklogic", "6.0") function cts:valid-index-path($string as xs:string) as xs:Bool external;
declare %a:since("marklogic", "6.0") function cts:value-co-occurrences($range-index-1 as cts:reference, $range-index-2 as cts:reference) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "6.0") function cts:value-co-occurrences($range-index-1 as cts:reference, $range-index-2 as cts:reference, $options as xs:string*) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "6.0") function cts:value-co-occurrences($range-index-1 as cts:reference, $range-index-2 as cts:reference, $options as xs:string*, $query as cts:query?) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "6.0") function cts:value-co-occurrences($range-index-1 as cts:reference, $range-index-2 as cts:reference, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "6.0") function cts:value-co-occurrences($range-index-1 as cts:reference, $range-index-2 as cts:reference, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as element(cts:co-occurrence)* external;
declare %a:since("marklogic", "6.0") function cts:value-match($range-indexes as cts:reference*, $pattern as xs:anyAtomicType) as xs:anyAtomicType* external;
declare %a:since("marklogic", "6.0") function cts:value-match($range-indexes as cts:reference*, $pattern as xs:anyAtomicType, $options as xs:string*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "6.0") function cts:value-match($range-indexes as cts:reference*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "6.0") function cts:value-match($range-indexes as cts:reference*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "6.0") function cts:value-match($range-indexes as cts:reference*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "6.0") function cts:value-ranges($range-indexes as cts:reference*) as element(cts:range)* external;
declare %a:since("marklogic", "6.0") function cts:value-ranges($range-indexes as cts:reference*, $bounds as xs:anyAtomicType*) as element(cts:range)* external;
declare %a:since("marklogic", "6.0") function cts:value-ranges($range-indexes as cts:reference*, $bounds as xs:anyAtomicType*, $options as xs:string*) as element(cts:range)* external;
declare %a:since("marklogic", "6.0") function cts:value-ranges($range-indexes as cts:reference*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?) as element(cts:range)* external;
declare %a:since("marklogic", "6.0") function cts:value-ranges($range-indexes as cts:reference*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as element(cts:range)* external;
declare %a:since("marklogic", "6.0") function cts:value-ranges($range-indexes as cts:reference*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as element(cts:range)* external;
declare %a:since("marklogic", "6.0") function cts:value-tuples($range-indexes as cts:reference*) as json:array* external;
declare %a:since("marklogic", "6.0") function cts:value-tuples($range-indexes as cts:reference*, $options as xs:string*) as json:array* external;
declare %a:since("marklogic", "6.0") function cts:value-tuples($range-indexes as cts:reference*, $options as xs:string*, $query as cts:query?) as json:array* external;
declare %a:since("marklogic", "6.0") function cts:value-tuples($range-indexes as cts:reference*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as json:array* external;
declare %a:since("marklogic", "6.0") function cts:value-tuples($range-indexes as cts:reference*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as json:array* external;
declare %a:since("marklogic", "6.0") function cts:values($range-indexes as cts:reference*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "6.0") function cts:values($range-indexes as cts:reference*, $start as xs:anyAtomicType?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "6.0") function cts:values($range-indexes as cts:reference*, $start as xs:anyAtomicType?, $options as xs:string*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "6.0") function cts:values($range-indexes as cts:reference*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "6.0") function cts:values($range-indexes as cts:reference*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:anyAtomicType* external;
declare %a:since("marklogic", "6.0") function cts:values($range-indexes as cts:reference*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:anyAtomicType* external;
declare %a:since("marklogic", "6.0") function cts:variance($range-index as cts:reference) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:variance($range-index as cts:reference, $options as xs:string*) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:variance($range-index as cts:reference, $options as xs:string*, $query as cts:query?) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:variance($range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:variance-p($range-index as cts:reference) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:variance-p($range-index as cts:reference, $options as xs:string*) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:variance-p($range-index as cts:reference, $options as xs:string*, $query as cts:query?) as xs:double? external;
declare %a:since("marklogic", "6.0") function cts:variance-p($range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*) as xs:double? external;
declare %a:since("marklogic", "5.0") function cts:walk($node as node(), $query as cts:query, $expr as item()*) as item()* external;
declare %a:since("marklogic", "5.0") function cts:word-match($pattern as xs:string) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:word-match($pattern as xs:string, $options as xs:string*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:word-match($pattern as xs:string, $options as xs:string*, $query as cts:query?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:word-match($pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:word-match($pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:word-query($text as xs:string*) as cts:word-query external;
declare %a:since("marklogic", "5.0") function cts:word-query($text as xs:string*, $options as xs:string*) as cts:word-query external;
declare %a:since("marklogic", "5.0") function cts:word-query($text as xs:string*, $options as xs:string*, $weight as xs:double?) as cts:word-query external;
declare %a:since("marklogic", "5.0") function cts:word-query-options($query as cts:word-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:word-query-text($query as cts:word-query) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:word-query-weight($query as cts:word-query) as xs:double external;
declare %a:since("marklogic", "5.0") function cts:words() as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:words($start as xs:string?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:words($start as xs:string?, $options as xs:string*) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:words($start as xs:string?, $options as xs:string*, $query as cts:query?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:words($start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?) as xs:string* external;
declare %a:since("marklogic", "5.0") function cts:words($start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*) as xs:string* external;