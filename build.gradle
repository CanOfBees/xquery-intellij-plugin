buildscript {
    // (1) Year and Version -- (a) IC-2017.3, (b) 2017.2.4, (c) 2018.1
    // (2) Build ID -- (a) IU-163.7890, (b) 171.1234
    // (3) Named Snapshots -- (a) LATEST-EAP-SNAPSHOT, (b) LATEST-TRUNK-SNAPSHOT
    ext.since_from_version = { version ->
        // (1) Year and Version

        def since = version =~ /([A-Z]+-)?20([0-9][0-9])\.([1-3])(\.[0-9]+)?/
        if (since.matches()) {
            return "${since.group(2)}${since.group(3)}"
        }

        // (2) Build ID

        since = version =~ /([A-Z]+-)?([0-9][0-9][0-9])\.[0-9]+?/
        if (since.matches()) {
            return since.group(2)
        }

        // (3) Named Snapshots

        def repositoryPath = "https://www.jetbrains.com/intellij-repository/snapshots/com/jetbrains/intellij/idea/BUILD"
        def build = new File("$projectDir/build/BUILD-${version}.txt")
        if (!build.exists()) {
            build.parentFile.mkdirs()
            println "Downloading build version file '$repositoryPath/$version/BUILD-${version}.txt' to '${build.absolutePath}'"
            new URL("$repositoryPath/$version/BUILD-${version}.txt").withInputStream { input ->
                build.withOutputStream { output -> (output << input).close() }
            }
        }

        return build.readLines()[0].split('\\.')[0]
    }

    ext.kotlin_from_version = { version ->
        if (version >= 191)
            "1.3.11"
        else
            "1.2.71"
    }

    ext.idea_version = System.getenv("IDEA_VERSION") ?: '2019.2'
    ext.idea_since_build = ext.since_from_version(ext.idea_version)
    ext.junit_milestone = ''
    ext.kotlin_version = ext.kotlin_from_version(ext.idea_since_build.toInteger())

    ext.plugin_version = '1.5.1'
    ext.suffix = ''

    // The JBR version to use with buildSearchableOptions.
    ext.jbr_build = System.getenv("JBR_BUILD")

    // The JBR version to use with runIde.
    ext.jbr_runide = System.getenv("JBR_RUNIDE")

    repositories {
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.4.8"
}

configure(allprojects - project(':src')) {
    apply plugin: 'org.jetbrains.intellij'
    apply plugin: 'idea'
    apply plugin: 'kotlin'
    apply plugin: 'jacoco'

    group 'uk.co.reecedunn.intellij.plugin.xquery'
    version = plugin_version + '-' + idea_since_build.toString() + suffix

    repositories {
        mavenCentral()
        mavenLocal()
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    intellij {
        version = idea_version
    }

    if (jbr_build != null) {
        buildSearchableOptions.jbrVersion = jbr_build
    }

    if (jbr_runide != null) {
        buildSearchableOptions.jbrVersion = jbr_runide
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

        testCompile "org.junit.jupiter:junit-jupiter-api:5.4.0$junit_milestone"

        testRuntime("org.junit.platform:junit-platform-launcher:1.4.0$junit_milestone")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:5.4.0$junit_milestone")
    }

    tasks {
        // Using the IntelliJ gradle plugin to provide the IntelliJ platform SDK in
        // each subproject results in various deployment related tasks being added
        // to those subprojects. As this plugin only uses those tasks on the main
        // project, those tasks are disabled globally and only enabled for the
        // main project.
        buildPlugin.enabled = false
        prepareSandbox.enabled = false
        prepareTestingSandbox.enabled = false
        publishPlugin.enabled = false
        runIde.enabled = false
        verifyPlugin.enabled = false
        buildSearchableOptions.enabled = false
    }

    test {
        useJUnitPlatform()
    }
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

dependencies {
    compile project(':src:plugin-basex')
    compile project(':src:plugin-existdb')
    compile project(':src:plugin-marklogic')
    compile project(':src:plugin-saxon')

    compile project(':src:plugin-expath')
    compile project(':src:plugin-exquery')
    compile project(':src:plugin-w3')

    testCompile project(':src:kotlin-hamcrest')
    testCompile project(':src:intellij-mock')

    integrationTestCompile configurations.testCompile
    integrationTestRuntime configurations.testRuntime
}

idea_version = project.property('idea_since_build').toInteger()
if (idea_version >= 192) {
    sourceSets.main.resources.srcDirs += 'src/main/resources-192'
}
else {
    sourceSets.main.resources.srcDirs += 'src/main/resources-191'
}

tasks {
    // Using the IntelliJ gradle plugin to provide the IntelliJ platform SDK in
    // each subproject results in various deployment related tasks being added
    // to those subprojects. As this plugin only uses those tasks on the main
    // project, those tasks are disabled globally and only enabled for the
    // main project.
    buildPlugin.enabled = true
    prepareSandbox.enabled = true
    prepareTestingSandbox.enabled = true
    publishPlugin.enabled = true
    runIde.enabled = true
    verifyPlugin.enabled = true
    buildSearchableOptions.enabled = true
}

intellij {
    println "Building for IntelliJ version '${version}', since build '${idea_since_build}'"

    updateSinceUntilBuild = true
    sameSinceUntilBuild = true // 'until' is an open 'since' build

    plugins 'coverage'  // Bundled plugin dependencies
    pluginName 'xquery-intellij-plugin'
}

patchPluginXml {
    sinceBuild = idea_since_build
}

jacoco {
    toolVersion = '0.8.4'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport

repositories {
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    mavenCentral()
}

// Module Dependency Report =============================================================
// Derived from https://gist.github.com/nikialeksey/7cefae6b3104ce9a2c765197343bc436

task moduleDependencyReport {
    doLast {
        def file = new File("project-dependencies.dot")
        file.delete()
        file << "strict digraph \"Module Dependencies\" {\n"
        def deps = [:]
        buildDeps(deps, rootProject)
        deps.forEach { from, toList ->
            file << "\"$from\" [shape=none]\n"
            toList.forEach { to ->
                if (to != "kotlin-hamcrest" && to != "intellij-mock") {
                    file << ("\"$from\" -> \"$to\"\n")
                }
            }
        }
        file << "}\n"
    }
}

def buildDeps(deps, project) {
    project.configurations
           .findAll { it.name == "compile" || it.name == "runtime" }
           .collectMany { it.dependencies }
           .findAll { it instanceof ProjectDependency }
           .each { to -> addOnce(deps, project.name, to.name) }

    project.childProjects.each { name, childProject -> buildDeps(deps, childProject) }
}

static def addOnce(map, key, value) {
    if (key in map.keySet()) {
        if (!(value in map[key])) {
            map[key].add(value)
        }
    } else {
        map[key] = [value]
    }

    if (!(value in map.keySet())) {
        map[value] = []
    }
}